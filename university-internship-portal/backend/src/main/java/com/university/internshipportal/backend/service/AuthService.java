package com.university.internshipportal.backend.service;

import com.university.internshipportal.backend.config.JwtUtil;
import com.university.internshipportal.backend.dto.RegisterRequest;
import com.university.internshipportal.backend.exception.CustomAuthenticationException;
import com.university.internshipportal.backend.model.User;
import com.university.internshipportal.backend.model.enums.Role;
import com.university.internshipportal.backend.repository.UserRepository;
import jakarta.transaction.Transactional; // Use Jakarta Transactional
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

// IMPORTANT: Ensure all these imports are present and correct based on your file structure.

@Service
public class AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private AuthenticationManager authenticationManager; // Used to authenticate users

    @Autowired
    private JwtUtil jwtUtil; // Utility for JWT token generation

    @Autowired
    private StudentService studentService; // To create student profile after user registration

    @Autowired
    private MentorService mentorService; // To create mentor profile after user registration


    /**
     * Registers a new user with the specified role.
     * Throws RuntimeException if username or email already exists.
     * Automatically creates a linked Student or Mentor profile.
     * @param request The RegisterRequest DTO containing user registration details.
     * @return The newly created User entity.
     */
    @Transactional // Ensures the user and profile creation are atomic
    public User registerUser(RegisterRequest request) {
        if (userRepository.existsByUsername(request.getUsername())) {
            throw new RuntimeException("Username is already taken!");
        }

        if (userRepository.existsByEmail(request.getEmail())) {
            throw new RuntimeException("Email is already in use!");
        }

        // Create new user's account
        User user = new User(
                null, // ID will be generated by the database
                request.getUsername(),
                request.getEmail(),
                passwordEncoder.encode(request.getPassword()), // Hash the password
                request.getRole(),
                null, null // Timestamps will be handled by @CreationTimestamp/@UpdateTimestamp
        );

        User savedUser = userRepository.save(user); // Save the user to get its ID

        // Create associated profile based on role
        if (savedUser.getRole() == Role.STUDENT) {
            studentService.createStudentProfile(savedUser);
        } else if (savedUser.getRole() == Role.MENTOR) {
            mentorService.createMentorProfile(savedUser);
        }
        // Admin profile creation is usually manual or via an admin tool, not self-registration

        return savedUser;
    }

    /**
     * Authenticates a user and generates a JWT token upon successful login.
     * @param username The user's username.
     * @param password The user's plain-text password.
     * @return A JWT token string.
     * @throws CustomAuthenticationException if authentication fails (e.g., bad credentials).
     */
    public String authenticateUser(String username, String password) {
        try {
            // Authenticate user credentials using Spring Security's AuthenticationManager
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(username, password));

            // Set the authenticated object in the SecurityContextHolder
            // This is important for subsequent security checks within the same request lifecycle
            SecurityContextHolder.getContext().setAuthentication(authentication);

            // Generate JWT token
            return jwtUtil.generateToken(authentication);
        } catch (BadCredentialsException e) {
            // Catch specific Spring Security bad credentials exception and re-throw as custom exception
            throw new CustomAuthenticationException("Invalid username or password", e);
        }
        // Other RuntimeExceptions might be caught by GlobalExceptionHandler
    }

    /**
     * Retrieves the role of a user by username.
     * @param username The username of the user.
     * @return The role name as a String (e.g., "STUDENT", "MENTOR", "ADMIN").
     * @throws RuntimeException if the user is not found (though should be caught by GlobalExceptionHandler)
     */
    public String getUserRole(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found")); // This could throw ResourceNotFoundException
        return user.getRole().name();
    }
}